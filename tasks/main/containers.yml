---

- name: create network for all services
  docker_network:
    name: traefik

- name: create network for grafana, loki, promtail, node_exporter, and prometheus
  docker_network:
    name: metrics

- name: create persistent volume for loki
  docker_volume:
    name: loki_data

# loki
- name: loki
  docker_container:
    name: loki
    image: grafana/loki:3.0.0
    command: ["-config.file=/etc/loki/loki-config.yml", "-target=all"]
    volumes:
      - "{{ docker_path }}/loki/loki-config.yml:/etc/loki/loki-config.yml"
    ports:
      - "3100:3100"
    networks:
      - name: "metrics"
      - name: "traefik"
    restart_policy: unless-stopped

- name: create persistent volume for promtail
  docker_volume:
    name: promtail_data

# promtail
- name: promtail
  docker_container:
    name: promtail
    image: grafana/promtail:3.0.0
    volumes:
      - "promtail_data:/etc/promtail"
      - "/var/log:/var/log"
    networks:
      - name: "metrics"
      - name: "traefik"
    restart_policy: unless-stopped

# traefik 
- name: traefik reverse proxy
  docker_container:
    name: traefik
    image: traefik:v2.11
    ports:
      - "80:80"
      - "443:443"
      - "81:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    command: ["--api.insecure=true", "--providers.docker"]
    networks:
      - name: "traefik"
    restart_policy: unless-stopped

# node exporter
- name: node-exporter
  docker_container:
    name: node-exporter
    image: prom/node-exporter:v1.8.2
    command: ["--path.rootfs=/host"]
    ports:
      - "9100:9100"
    volumes:
      - "/:/host:ro,rslave"
    networks:
      - name: "metrics"
      - name: "traefik"
    restart_policy: unless-stopped

# sensors exporter
- name: sensors-exporter
  docker_container:
    name: sensors-exporter
    image: anthonymolinari/sensors-exporter@sha256:a71fc71454ecd72def7184f04f2869065557de8fbcacb02e12200933bfed3c1f
    ports:
      - "9200:8282"
    networks:
      - name: "metrics"
      - name: "traefik"
    restart_policy: unless-stopped

# nvidia exporter
- name: gpu-exporter
  docker_container:
    name: nvidia-smi-exporter
    image: nvcr.io/nvidia/k8s/dcgm-exporter:3.3.5-3.4.0-ubuntu22.04
    ports:
      - "9400:9400"
    networks:
      - name: "metrics"
      - name: "traefik"
    device_requests:
      - device_ids: 0
        driver: nvidia
        capabilities:
          - gpu
          - compute
          - utility
    restart_policy: unless-stopped

- name: create persistent volume for grafana
  docker_volume:
    name: grafana_data

# grafana
- name: grafana
  docker_container:
    name: grafana
    image: grafana/grafana:11.1.0
    ports:
      - "3000:3000"
    networks:
      - name: "metrics"
      - name: "traefik"
    volumes:
      - "grafana_data:/var/lib/grafana"
    labels:
      traefik.http.routers.grafana.rule: "Host(`grafana.homelab.lan`)"
      traefik.http.services.grafana.loadbalancer.server.port: "3000"
    restart_policy: unless-stopped

# openbooks
- name: openbooks 
  docker_container:
    name: openbooks
    image: evanbuss/openbooks:4.5.0
    volumes:
      - "{{downloads_dir}}:/books"
    ports:
      - "4567:80"
    command: ["--name", "iker_neptunis", "--persist", "-s", "irc.irchighway.net:9999"]
    networks:
      - name: "traefik"
    labels:
      traefik.http.routers.openbooks.rule: "Host(`openbooks.homelab.lan`)"
    restart_policy: unless-stopped

# plex
- name: plex
  docker_container:
    name: plex
    image: linuxserver/plex:1.40.4
    volumes:
      - "{{ media_dir }}:/Media"
      - "{{ docker_path }}/plex/config:/config"
    ports:
      - "32400:32400"
      - "5353:5353/udp"
      - "8324:8324/tcp"
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32469:32469/tcp"
    networks:
      - name: "traefik"
    device_requests:
      - device_ids: 0
        driver: nvidia
        capabilities:
          - gpu
          - compute
          - utility
    env:
      PUID: "1000"
      PGID: "1000"
      VERSION: "docker"
    labels:
      traefik.http.routers.plex.rule: "Host(`plex.homelab.lan`)"
    restart_policy: unless-stopped

# tdarr 
- name: tdarr
  docker_container:
    name: tdarr
    image: haveagitgat/tdarr:2.22.01 
    ports:
      - "8265:8265"
      - "8266:8266"
    volumes:
      - "{{ docker_path }}/tdarr/server:/app/server"
      - "{{ docker_path }}/tdarr/configs:/app/config"
      - "{{ docker_path }}/tdarr/logs:/app/logs"
      - "{{ media_dir }}:/media"
      - "/transcode_cache:/temp"
    device_requests:
      - device_ids: 0
        driver: nvidia
        capabilities:
          - gpu
          - compute
          - utility
    env:
      serverIP: "0.0.0.0"
      serverPort: "8266"
      webUIPort: "8265"
      internalNode: "true"
      inContainer: "true"
      ffmpegVersion: "6"
      nodeName: "MyInternalNode"
      TZ: "{{ timezone }}"
      PUID: "1000"
      PGID: "1000"
      NVIDIA_DRIVER_CAPABILITIES: "all"
      NVIDIA_VISIBLE_DEVICES: "all"
    networks:
      - name: "traefik"
    labels:
      traefik.http.routers.tdarr.rule: "Host(`tdarr.homelab.lan`)"
    restart_policy: unless-stopped

# sonarr
- name: sonarr
  docker_container:
    name: sonarr
    image: linuxserver/sonarr:4.0.6-develop   
    ports:
      - "8989:8989"
    volumes:
      - "{{ docker_path }}/sonarr/config:/config"
      - "{{ media_dir }}:/tv"
      - "{{ downloads_dir }}/torrents:/downloads"
    env:
      PGID: "1000"
      PUID: "1000"
      TZ: "{{ timezone }}"
    networks:
      - name: "traefik"
    labels:
      traefik.http.routers.sonarr.rule: "Host(`sonarr.homelab.lan`)"
    restart_policy: unless-stopped

# radarr
- name: radarr
  docker_container:
    name: radarr
    image: linuxserver/radarr@sha256:bff9793291488bca8f04839a53de70bd498bdcf7b7bce8a73255cf68ccd4b17c    
    ports:
      - "7878:7878"
    volumes:
      - "{{ docker_path }}/radarr/config:/config"
      - "{{ media_dir }}:/movies"
      - "{{ downloads_dir }}/torrents:/downloads"
    env:
      PGID: "1000"
      PUID: "1000"
      TZ: "{{ timezone }}"
    networks:
      - name: "traefik"
    labels:
      traefik.http.routers.radarr.rule: "Host(`radarr.homelab.lan`)"
    restart_policy: unless-stopped

# bazarr
- name: deploy bazarr
  docker_container:
    name: bazarr
    image: linuxserver/bazarr:1.4.3
    ports:
      - "6767:6767"
    volumes:
      - "{{ docker_path }}/bazarr/config:/config"
      - "{{ media_dir }}:/media"
    env:
      PGID: "1000"
      PUID: "1000"
      TZ: "{{ timezone }}"
    networks:
      - name: "traefik"
    labels:
      traefik.http.routers.bazarr.rule: "Host(`bazarr.homelab.lan`)"
    restart_policy: unless-stopped

# homarr
- name: deploy homarr
  docker_container:
    name: homarr
    image: ghcr.io/ajnart/homarr:0.15.3
    ports:
      - "7575:7575"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "{{ docker_path }}/homarr/configs:/app/data/configs"
      - "{{ docker_path }}/homarr/icons:/app/public/icons"
      - "{{ docker_path }}/homarr:/data"
    networks:
      - name: "traefik"
    labels:
      traefik.http.routers.homarr.rule: "Host(`homarr.homelab.lan`)"
    restart_policy: unless-stopped

# overseerr
- name: deploy overseerr
  docker_container:
    name: overseerr
    image: sctx/overseerr:1.33.2
    ports:
      - "5055:5055"
    volumes:
      - "{{ docker_path }}/overseerr/config:/app/config"
    env:
      LOG_LEVEL: "debug"
      TZ: "{{ timezone }}"
    networks:
      - name: "traefik"
    labels:
      traefik.http.routers.overseerr.rule: "Host(`overseerr.homelab.lan`)"
    restart_policy: unless-stopped

# pia-vpn-container
- name: deploy vpn-client container
  docker_container:
    name: vpn
    image: dperson/openvpn-client@sha256:2defe3062e65ad0ecf43bc747d60d1274ebbf7a45100c5cf5448fd7114caac80
    volumes:
      - "{{ docker_path }}/vpn-client:/vpn"
    ports:
      - "9696:9696" # prowlarr webui
      - "9091:9091" # transmission webui
      - "6800:6800" # aria2 rpc
    restart_policy: unless-stopped
    capabilities:
      - "NET_ADMIN"
    devices:
      - "/dev/net/tun"
    env:
      VPN: "{{ vpn_arg }}"
      ROUTE: 172.24.10.0/24

# prowlarr
- name: deploy prowlarr behind vpn
  docker_container:
    name: prowlarr
    image: linuxserver/prowlarr@sha256:7b3408b3110c95231e7543a8b099be1e5f519be6f3fd0aebbed9ff1c061f2c3e
    volumes:
      - "{{ docker_path }}/prowlarr/config:/config"
    env:
      PUID: "1000"
      PGID: "1000"
    network_mode: container:vpn
    restart_policy: unless-stopped

# transmission
- name: deploy transmission behind vpn
  docker_container:
    name: transmission
    image: linuxserver/transmission:4.0.6
    volumes:
      - "{{ docker_path }}/transmission/config:/config"
      - "{{ downloads_dir }}/torrents:/downloads"
    env:
      PUID: "1000"
      PGID: "1000"
      TZ: "{{ timezone }}"
    network_mode: container:vpn
    restart_policy: unless-stopped

# aria2
- name: deploy aria2 behind vpn
  docker_contiainer:
    name: aria2
    image: p3terx/aria2-pro@sha256:086d1a37c586edb07ec0fb956bf9edd89d1d38d138ad5309ff96d510c8c9a011 
    volumes:
      - "{{ docker_path }}/aria2/config:/config"
      - "{{ downloads_dir }}/aria2:/downloads"
    env:
      PUID: "1000"
      PGID: "1000"
      UMASK_SET: "022"
      RPC_SECRET: "{{ aria2_rpc_secret }}"
      RPC_PORT: "6800"
      LISTEN_PORT: "6888"
    log_opts:
      max_size: 1m
    network_mode: container:vpn


# aria2 web ui
- name: aria2-ng-web
  docker_container:
    name: aria2-ng
    image: hurlenko/aria2-ariang@1.3.7
    volumes:
      - "{{ docker_path }}/aria2/config:/aria2/conf"
      - "{{ downloads_dir }}/aria2:/aria2/data"
    env:
      PUID: "1000"
      PGID: "1000"
      RPC_SECRET: "{{ aria2_rpc_secret }}"
      ARIA2RPCPORT: "6800"
    network_mode: container:vpn
