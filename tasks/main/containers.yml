---

- name: create network for grafana, loki, promtail, node_exporter, and prometheus
  docker_network:
    name: metrics

- name: create persistent volume for loki
  docker_volume:
    name: loki_data

# loki
- name: loki
  docker_container:
    name: loki
    image: grafana/loki:2.9.1
    volumes:
      - "loki_data:/etc/loki/"
    ports:
      - "3100:3100"
    networks:
      - name: "metrics"
    restart_policy: unless-stopped

- name: create persistent volume for promtail
  docker_volume:
    name: promtail_data

# promtail
- name: promtail
  docker_container:
    name: promtail
    image: grafana/promtail:2.9.1
    volumes:
      - "promtail_data:/etc/promtail"
      - "/var/log:/var/log"
    networks:
      - name: "metrics"
    restart_policy: unless-stopped

# node exporter
- name: node-exporter
  docker_container:
    name: node-exporter
    image: prom/node-exporter:v1.7.0
    command: ["--path.rootfs=/host"]
    ports:
      - "9100:9100"
    volumes:
      - "/:/host:ro,rslave"
    networks:
      - name: "metrics"
    restart_policy: unless-stopped

# sensors exporter
- name: sensors-exporter
  docker_container:
    name: sensors-exporter
    image: anthonymolinari/sensors-exporter@sha256:a71fc71454ecd72def7184f04f2869065557de8fbcacb02e12200933bfed3c1f
    ports:
      - "9200:8282"
    networks:
      - name: "metrics"
    restart_policy: unless-stopped

# promestheus
- name: prometheus
  docker_container:
    name: prometheus
    image: prom/prometheus:v2.47.2
    ports:
      - "9090:9090"
    volumes:
      - "{{ docker_path }}/prometheus:/etc/prometheus"
    networks:
      - name: "metrics"
    restart_policy: unless-stopped

- name: create persistent volume for grafana
  docker_volume:
    name: grafana_data

# grafana
- name: grafana
  docker_container:
    name: grafana
    image: grafana/grafana:10.2.1
    ports:
      - "3000:3000"
    networks:
      - name: "metrics"
    volumes:
      - "grafana_data:/var/lib/grafana"
    restart_policy: unless-stopped

# homer
- name: homer-dashboard
  docker_container:
    name: homer-dashboard
    image: b4bz/homer:v23.10.1
    volumes:
      - "{{ docker_path }}/homer:/www/assets"
    ports:
      - "8385:8080"
    restart_policy: unless-stopped

# openbooks
- name: openbooks 
  docker_container:
    name: openbooks
    image: evanbuss/openbooks:4.5.0
    volumes:
      - "{{downloads_dir}}:/books"
    ports:
      - "4567:80"
    command: ["--name", "iker_neptunus", "--persist", "-s", "irc.irchighway.net:9999"]
    restart_policy: unless-stopped

# plex
- name: plex
  docker_container:
    name: plex
    image: linuxserver/plex:1.32.7
    volumes:
      - "{{ media_dir }}:/Media"
      - "{{ docker_path }}/plex/config:/config"
    network_mode: "host"
    env:
      PUID: "1000"
      PGID: "1000"
      VERSION: "docker"
    restart_policy: unless-stopped

# sonarr
- name: sonarr
  docker_container:
    name: sonarr
    image: linuxserver/sonarr:4.0.0-develop   
    ports:
      - "8989:8989"
    volumes:
      - "{{ docker_path }}/sonarr/config:/config"
      - "{{ media_dir }}:/tv"
      - "{{ downloads_dir }}/torrents:/downloads"
    env:
      PGID: "1000"
      PUID: "1000"
      TZ: "{{ timezone }}"
    restart_policy: unless-stopped

# radarr
- name: radarr
  docker_container:
    name: radarr
    image: linuxserver/radarr@sha256:33e47990744bb2c2a70d9ac239258e8f1d41f254bb9346f92d5254417ec8e8ea    
    ports:
      - "7878:7878"
    volumes:
      - "{{ docker_path }}/radarr/config:/config"
      - "{{ media_dir }}:/movies"
      - "{{ downloads_dir }}/torrents:/downloads"
    env:
      PGID: "1000"
      PUID: "1000"
      TZ: "{{ timezone }}"
    restart_policy: unless-stopped

# bazarr
- name: deploy bazarr
  docker_container:
    name: bazarr
    image: linuxserver/bazarr:1.3.1
    ports:
      - "6767:6767"
    volumes:
      - "{{ docker_path }}/bazarr/config:/config"
      - "{{ media_dir }}:/media"
    env:
      PGID: "1000"
      PUID: "1000"
      TZ: "{{ timezone }}"
      restart_policy: unless-stopped

# pia-vpn-container
- name: deploy vpn-client container
  docker_container:
    name: vpn
    image: dperson/openvpn-client@sha256:2defe3062e65ad0ecf43bc747d60d1274ebbf7a45100c5cf5448fd7114caac80
    volumes:
      - "{{ docker_path }}/vpn-client:/vpn"
    ports:
      - "9696:9696" # prowlarr webui
      - "9091:9091" # transmission webui
    restart_policy: unless-stopped
    capabilities:
      - "NET_ADMIN"
    devices:
      - "/dev/net/tun"
    env:
      VPN: "{{ vpn_arg }}"
      ROUTE: 10.32.0.0/24

# prowlarr
- name: deploy prowlarr behind vpn
  docker_container:
    name: prowlarr
    image: linuxserver/prowlarr@sha256:2767c140d9af00cdea3c9bb684a9a6769af448d43eecfc7fbe00e76b9028d894
    volumes:
      - "{{ docker_path }}/prowlarr/config:/config"
    env:
      PUID: "1000"
      PGID: "1000"
    network_mode: container:vpn
    restart_policy: unless-stopped

# transmission
- name: deploy transmission behind vpn
  docker_container:
    name: transmission
    image: linuxserver/transmission:4.0.4
    volumes:
      - "{{ docker_path }}/transmission/config:/config"
      - "{{ downloads_dir }}/torrents:/downloads"
    env:
      PUID: "1000"
      PGID: "1000"
      TZ: "{{ timezone }}"
    network_mode: container:vpn
    restart_policy: unless-stopped

# netboot-xyz
- name: netboot server
  docker_container:
    name: netboot-xyz
    image: linuxserver/netbootxyz:2.0.53
    ports:
      - "3110:3000"
      - "69:69"
      - "8383:80"
    volumes:
      - "{{ docker_path }}/netboot-xyz/config:/config"
      - "{{ docker_path }}/netboot-xyz/assets:/assets"
    env:
      PUID: "1000"
      PGID: "1000"
      TZ: "{{ timezone }}"
    restart_policy: unless-stopped

# onlyoffice
- name: onlyoffice
  docker_container:
    name: onlyoffice
    image: onlyoffice/documentserver:7.5
    ports:
      - "9393:80"
    volumes:
      - "{{ docker_path }}/onlyoffice/logs:/var/log/onlyoffice"
      - "{{ docker_path }}/onlyoffice/data:/www/onlyoffice/Data"
      - "{{ docker_path }}/onlyoffice/lib:/lib/onlyoffice"
      - "{{ docker_path }}/onlyoffice/db:/var/lib/db"
    env:
      JWT_SECRET: "{{ onlyoffice_secret }}"
    restart_policy: unless-stopped

- name: create network for nextcloud
  docker_network:
    name: nextcloud

# # nextcloud-db
# - name: nextcloud mariadb database
#   docker_container:
#     name: mariadb-nextcloud 
#     image: "{{ mariadb_image }}"
#     command: ["--transaction-isolation=READ-COMMITTED", "--log-bin=binlog", "--binlog-format=ROW"]
#     ports:
#       - 3306:3306
#     volumes:
#       - "{{ docker_path }}/mariadb-nextcloud/data:/var/lib/mysql"
#     env:
#       MYSQL_ROOT_PASSWORD: '{{ NC_ROOT_PASS }}'
#       MYSQL_PASSWORD: '{{ NC_DB_PASS }}'
#       MYSQL_DATABASE: '{{ NC_DB_NAME }}'
#       MYSQL_USER: '{{ NC_DB_USER }}'
#     networks:
#       - name: "nextcloud"
#     restart_policy: always

# # nextcloud
# - name: nextcloud server
#   docker_container:
#     name: nextcloud
#     image: "{{ nextcloud_image }}"
#     ports:
#       - "8080:80"
#     links: 
#       - mariadb-nextcloud
#     networks:
#       - nextcloud
#     volumes:
#       - "{{ nextcloud_volume }}:/var/www/html"
#     env:
#       MYSQL_ROOT_PASSWORD: '{{ NC_ROOT_PASS }}'
#       MYSQL_PASSWORD: '{{ NC_DB_PASS }}'
#       MYSQL_DATABASE: '{{ NC_DB_NAME }}'
#       MYSQL_USER: '{{ NC_DB_USER }}'
