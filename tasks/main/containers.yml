---

- name: create network for all services
  docker_network:
    name: traefik

- name: create network for loki, promtail, node_exporter, and prometheus
  docker_network:
    name: metrics

- name: create persistent volume for promtail
  docker_volume:
    name: promtail_data

# traefik 
- name: traefik reverse proxy
  docker_container:
    name: traefik
    image: traefik:v2.11
    ports:
      - "80:80"
      - "443:443"
      - "81:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    command: ["--api.insecure=true", "--providers.docker"]
    networks:
      - name: "traefik"
    restart_policy: unless-stopped

# node exporter
- name: node-exporter
  docker_container:
    name: node-exporter
    image: prom/node-exporter:v1.9.0
    command: ["--path.rootfs=/host"]
    ports:
      - "9100:9100"
    volumes:
      - "/:/host:ro,rslave"
    networks:
      - name: "metrics"
      - name: "traefik"
    restart_policy: unless-stopped

# sensors exporter
- name: sensors-exporter
  docker_container:
    name: sensors-exporter
    image: anthonymolinari/sensors-exporter@sha256:a71fc71454ecd72def7184f04f2869065557de8fbcacb02e12200933bfed3c1f
    ports:
      - "8282:9200"
    networks:
      - name: "metrics"
      - name: "traefik"
    restart_policy: unless-stopped

# openbooks
- name: openbooks 
  docker_container:
    name: openbooks
    image: evanbuss/openbooks:4.5.0
    volumes:
      - "{{downloads_dir}}:/books"
    ports:
      - "4567:80"
    command: ["--name", "iker_neptunis", "--persist", "-s", "irc.irchighway.net:9999"]
    networks:
      - name: "traefik"
    labels:
      traefik.http.routers.openbooks.rule: "Host(`openbooks.homelab.lan`)"
    restart_policy: unless-stopped

# nvidia exporter
- name: gpu-exporter
  docker_container:
    name: nvidia-smi-exporter
    image: nvcr.io/nvidia/k8s/dcgm-exporter:3.3.5-3.4.0-ubuntu22.04
    ports:
      - "9400:9400"
    networks:
      - name: "metrics"
      - name: "traefik"
    device_requests:
      - device_ids: 0
        driver: nvidia
        capabilities:
          - gpu
          - compute
          - utility
    restart_policy: unless-stopped

# plex
- name: plex
  community.docker.docker_container:
    name: plex
    image: linuxserver/plex:1.41.4
    volumes:
      - "{{ media_dir }}:/Media"
      - "{{ docker_path }}/plex/config:/config"
    ports:
      - "32400:32400"
      - "5353:5353/udp"
      - "8324:8324/tcp"
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32469:32469/tcp"
    networks:
      - name: "traefik"
    device_requests:
      - device_ids: 0
        driver: nvidia
        capabilities:
          - gpu
          - compute
          - utility
    env:
      PUID: "1000"
      PGID: "1000"
      VERSION: "docker"
    labels:
      traefik.http.routers.plex.rule: "Host(`plex.homelab.lan`)"
    restart_policy: unless-stopped

# Jellyfin
- name: jellyfin
  docker_container:
    name: jellyfin
    image: linuxserver/jellyfin@sha256:075bc77361e6466f5cd546c9d97646428cc1f26d4b355991e8f66d0ffbc7c15a 
    volumes:
      - "{{ media_dir }}:/media"
      - "{{ docker_path }}/jellyfin/config:/config"
    ports:
      - "8096:8096/tcp"
      - "8920:8920/tcp"
      - "1900:1900/udp"
      - "7359:7359/udp"
    networks:
      - name: "traefik"
    env:
      PUID: "1000"
      PGID: "1000"
    device_requests:
      - device_ids: 0
        driver: nvidia
        capabilities:
          - gpu
          - compute
          - utility
    labels:
      traefik.http.routers.jellyfin.rule: "Host(`jellyfin.homelab.lan`)"
    restart_policy: unless-stopped

# tdarr 
- name: tdarr
  community.docker.docker_container:
    name: tdarr
    image: haveagitgat/tdarr:2.32.01 
    ports:
      - "8265:8265"
      - "8266:8266"
    volumes:
      - "{{ docker_path }}/tdarr/server:/app/server"
      - "{{ docker_path }}/tdarr/configs:/app/config"
      - "{{ docker_path }}/tdarr/logs:/app/logs"
      - "{{ media_dir }}:/media"
      - "/transcode_cache:/temp"
    device_requests:
      - device_ids: 0
        driver: nvidia
        capabilities:
          - gpu
          - compute
          - utility
    env:
      serverIP: "0.0.0.0"
      serverPort: "8266"
      webUIPort: "8265"
      internalNode: "true"
      inContainer: "true"
      ffmpegVersion: "6"
      nodeName: "MyInternalNode"
      TZ: "{{ timezone }}"
      PUID: "1000"
      PGID: "1000"
      NVIDIA_DRIVER_CAPABILITIES: "all"
      NVIDIA_VISIBLE_DEVICES: "all"
    networks:
      - name: "traefik"
    labels:
      traefik.http.routers.tdarr.rule: "Host(`tdarr.homelab.lan`)"
    restart_policy: unless-stopped

# sonarr
- name: sonarr
  docker_container:
    name: sonarr
    image: linuxserver/sonarr:4.0.13-develop   
    ports:
      - "8989:8989"
    volumes:
      - "{{ docker_path }}/sonarr/config:/config"
      - "{{ media_dir }}:/tv"
      - "{{ downloads_dir }}/torrents:/downloads"
    env:
      PGID: "1000"
      PUID: "1000"
      TZ: "{{ timezone }}"
    networks:
      - name: "traefik"
    labels:
      traefik.http.routers.sonarr.rule: "Host(`sonarr.homelab.lan`)"
    restart_policy: unless-stopped

# radarr
- name: radarr
  docker_container:
    name: radarr
    image: linuxserver/radarr@sha256:fbe114e1ba6a72f31bfd38e1133367a1b4a0dfbeedf7419703838f54cc0c501c    
    ports:
      - "7878:7878"
    volumes:
      - "{{ docker_path }}/radarr/config:/config"
      - "{{ media_dir }}:/movies"
      - "{{ downloads_dir }}/torrents:/downloads"
    env:
      PGID: "1000"
      PUID: "1000"
      TZ: "{{ timezone }}"
    networks:
      - name: "traefik"
    labels:
      traefik.http.routers.radarr.rule: "Host(`radarr.homelab.lan`)"
    restart_policy: unless-stopped

# homarr
- name: deploy homarr
  docker_container:
    name: homarr
    image: ghcr.io/ajnart/homarr:0.15.10
    ports:
      - "7575:7575"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "{{ docker_path }}/homarr/configs:/app/data/configs"
      - "{{ docker_path }}/homarr/icons:/app/public/icons"
      - "{{ docker_path }}/homarr:/data"
    networks:
      - name: "traefik"
    labels:
      traefik.http.routers.homarr.rule: "Host(`homarr.homelab.lan`)"
    restart_policy: unless-stopped

# overseerr
- name: deploy overseerr
  docker_container:
    name: overseerr
    image: sctx/overseerr:1.33.2
    ports:
      - "5055:5055"
    volumes:
      - "{{ docker_path }}/overseerr/config:/app/config"
    env:
      LOG_LEVEL: "debug"
      TZ: "{{ timezone }}"
    networks:
      - name: "traefik"
    labels:
      traefik.http.routers.overseerr.rule: "Host(`overseerr.homelab.lan`)"
    restart_policy: unless-stopped

# pia-vpn-container
- name: deploy vpn-client container
  docker_container:
    name: vpn
    image: dperson/openvpn-client@sha256:2defe3062e65ad0ecf43bc747d60d1274ebbf7a45100c5cf5448fd7114caac80
    volumes:
      - "{{ docker_path }}/vpn-client:/vpn"
    ports:
      - "9696:9696" # prowlarr webui
      - "9091:9091" # transmission webui
    restart_policy: unless-stopped
    capabilities:
      - "NET_ADMIN"
    devices:
      - "/dev/net/tun"
    env:
      VPN: "{{ vpn_arg }}"
      ROUTE: 172.24.10.0/24

# prowlarr
- name: deploy prowlarr behind vpn
  docker_container:
    name: prowlarr
    image: linuxserver/prowlarr@sha256:53e8a473db4fb811a54bce1cf9fe3c2962752e40e4696e04974b804d1333d4fa
    volumes:
      - "{{ docker_path }}/prowlarr/config:/config"
    env:
      PUID: "1000"
      PGID: "1000"
    network_mode: container:vpn
    restart_policy: unless-stopped

# transmission
- name: deploy transmission behind vpn
  docker_container:
    name: transmission
    image: linuxserver/transmission:4.0.6
    volumes:
      - "{{ docker_path }}/transmission/config:/config"
      - "{{ downloads_dir }}/torrents:/downloads"
    env:
      PUID: "1000"
      PGID: "1000"
      TZ: "{{ timezone }}"
    network_mode: container:vpn
    restart_policy: unless-stopped

# scrutiny disk metrics
- name: deploy scrutiny disk metrics
  docker_container:
    name: scrutiny
    image: ghcr.io/analogj/scrutiny:master-omnibus
    ports:
      - "8181:8080" # webapp
      - "8086:8086" # influxdb admin
    volumes:
      - "{{ docker_path }}/scrutiny/config:/opt/scrutiny/config"
      - "{{ docker_path }}/scrutiny/influxdb:/opt/scrutiny/influxdb"
      - "/run/udev:/run/udev:ro"
    capabilities:
      - "SYS_RAWIO"
    devices:
      - "/dev/sda"
      - "/dev/sdb"
      - "/dev/sdc"
      - "/dev/sdd"
      - "/dev/sde"
    restart_policy: unless-stopped

# frigate nvr
- name: deploy frigate nvr
  docker_container:
    name: frigate
    image: ghcr.io/blakeblackshear/frigate:stable
    ports:
      - "8971:8971"
      - "8554:8554"
      - "5000:5000"
      - "8555:8555/tcp"
      - "8555:8555/udp"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "{{ docker_path }}/frigate/config:/config"
      - "{{ frigate_video }}:/media/frigate"
    device_requests:
      - device_ids: 0
        driver: nvidia
        capabilities:
          - gpu
          - compute
          - utility
    env:
      FRIGATE_RTSP_PASSWORD: "{{ frigate_rtsp_password }}"
    restart_policy: unless-stopped
